#BlueJ class context
comment0.target=Termino
comment0.text=\r\n\ Termino\:\ clase\ de\ la\ Clave\ del\ Map\ que\ representa\ un\ termino\ del\ \r\n\ Indice\ Analitico\ de\ una\ Biblioteca\ Digital.\r\n\ \r\n\ Para\ que\ sobrescriba\ eficientemente\ los\ metodos\ equals\ y\ hashCode\r\n\ de\ Object,\ un\ Termino\ TIENE\ UN\ valorHash\ que\ almacena\ el\ resultado\ \r\n\ de\ la\ PRIMERA\ invocacion\ al\ metodo\ hashCode\ de\ la\ clase\ sobre\ el.\ \r\n\ De\ esta\ forma,\ el\ valor\ hash\ asociado\ a\ un\ Termino...\r\n\ (a)\ solo\ se\ calcula\ una\ vez,\ independientemente\ del\ numero\ de\ veces\ \r\n\ \ \ \ \ que\ el\ metodo\ hashCode\ se\ aplique\ sobre\ el;\r\n\ (b)\ se\ puede\ usar\ en\ el\ metodo\ equals\ de\ la\ clase\ para\ comprobar\ la\r\n\ \ \ \ \ igualdad\ de\ dos\ terminos\ SOLO\ cuando\ sus\ valores\ Hash\ sean\ iguales.\r\n\r\n\ Ademas,\ para\ poder\ evaluar\ distintos\ metodos\ hashCode,\ un\ Termino\ TIENE\ \r\n\ UNA\ baseHashCode\ que\ almacena\ la\ base\ en\ la\ que\ se\ calcula\ su\ valorHash\r\n\ \r\n\ @author\ \ Profesores\ EDA\ \r\n\ @version\ Septiembre\ 2023\r\n
comment1.params=p\ base
comment1.target=Termino(java.lang.String,\ int)
comment1.text=\ Crea\ el\ Termino\ asociado\ a\ la\ palabra\ p\ y\ \r\nle\ asocia\ la\ base\ a\ emplear\ en\ el\ metodo\ hashCode
comment2.params=p
comment2.target=Termino(java.lang.String)
comment2.text=Crea\ el\ Termino\ asociado\ a\ la\ palabra\ p\ segun\ el\ estandar\ de\ Java
comment3.params=
comment3.target=int\ hashCode()
comment3.text=\ Devuelve\ el\ valor\ Hash\ de\ un\ (this)\ Termino\ de\ forma\ EFICIENTE,\ \r\n\ \ i.e.\r\n\ \ al\ aplicar\ este\ metodo\ por\ PRIMERA\ vez\ sobre\ un\ Termino\ de\ longitud\ n\ \ \=\ palabra.length(),\ \r\n\ \ calcula\ su\ valor\ Hash,\ o\ valor\ de\ la\ siguiente\ funcion\ polinomial\ de\ base\ baseHashCode,\ \r\n\ \ usando\ la\ regla\ de\ Horner\ y,\ por\ tanto,\ SIN\ usar\ metodos\ de\ la\ clase\ Math\:\ \r\n\ \ \r\n\ \ valorHash\ \=\ \ \ palabra.charAt(0)\ *\ baseHashCode^(n-1)\ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\ palabra.charAt(1)\ *\ baseHashCode^(n-2)\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\ ...\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\ palabra.charAt[n-1]\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ Si\ NO\ es\ la\ primera\ vez\ que\ se\ aplica\ el\ metodo,\ devuelve\ valorHash\ \r\n
comment4.params=otro
comment4.target=boolean\ equals(java.lang.Object)
comment4.text=\ Comprueba\ si\ un\ (this)\ Termino\ es\ igual\ a\ otro\ de\ forma\ \ \r\n\ \ eficiente,\ i.e.\ SOLO\ ejecuta\ el\ metodo\ equals\ de\ String\ \r\n\ \ cuando\ los\ valores\ Hash\ de\ this\ y\ otro\ Termino\ son\ iguales\r\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=Devuelve\ un\ String\ que\ representa\ un\ Termino\ en\ cierto\ formato\ texto
comment6.params=p
comment6.target=boolean\ esValido(java.lang.String)
comment6.text=\ Comprueba\ si\ una\ palabra,\ p,\ puede\ ser\ un\ termino\ del\ Indice\ de\ una\ BD,\ \r\n\ \ i.e.\ si\ p\ esta\ formada\ por\ letras\ del\ alfabeto\ espa\u00F1ol\ en\ minusculas.\r\n
numComments=7
